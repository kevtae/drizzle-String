{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/kevin/dype-code/practice/drizzle-string/client/src/App.js\";\nimport React, { Component } from 'react';\nimport ReadString from \"./ReadString\";\nimport SetString from \"./SetString\";\nimport logo from \"./logo.svg\";\nimport './App.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      drizzleState: null\n    };\n  }\n\n  componentDidMount() {\n    const drizzle = this.props.drizzle; // subscribe to changes in the store\n\n    this.unsubscribe = drizzle.store.subscribe(() => {\n      // every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState(); // check to see if it's ready, if so, update local component state\n\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({\n          loading: false,\n          drizzleState\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  render() {\n    if (this.state.loading) return \"Loading Drizzle...\";\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(ReadString, {\n      drizzle: this.props.drizzle,\n      drizzleState: this.state.drizzleState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }), React.createElement(SetString, {\n      drizzle: this.props.drizzle,\n      drizzleState: this.state.drizzleState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/mnt/c/Users/kevin/dype-code/practice/drizzle-string/client/src/App.js"],"names":["React","Component","ReadString","SetString","App","state","loading","drizzleState","componentDidMount","drizzle","props","unsubscribe","store","subscribe","getState","drizzleStatus","initialized","setState","componentWillUnmount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,OAAO,WAAP;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BI,KAD0B,GAClB;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,YAAY,EAAE;AAA/B,KADkB;AAAA;;AAG1BC,EAAAA,iBAAiB,GAAG;AAAA,UACVC,OADU,GACE,KAAKC,KADP,CACVD,OADU,EAGlB;;AACA,SAAKE,WAAL,GAAmBF,OAAO,CAACG,KAAR,CAAcC,SAAd,CAAwB,MAAM;AAE/C;AACA,YAAMN,YAAY,GAAGE,OAAO,CAACG,KAAR,CAAcE,QAAd,EAArB,CAH+C,CAK/C;;AACA,UAAIP,YAAY,CAACQ,aAAb,CAA2BC,WAA/B,EAA4C;AAC1C,aAAKC,QAAL,CAAc;AAAEX,UAAAA,OAAO,EAAE,KAAX;AAAkBC,UAAAA;AAAlB,SAAd;AACD;AACF,KATkB,CAAnB;AAUD;;AAEDW,EAAAA,oBAAoB,GAAG;AACrB,SAAKP,WAAL;AACD;;AAEDQ,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKd,KAAL,CAAWC,OAAf,EAAwB,OAAO,oBAAP;AACxB,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AACE,MAAA,OAAO,EAAE,KAAKI,KAAL,CAAWD,OADtB;AAEE,MAAA,YAAY,EAAE,KAAKJ,KAAL,CAAWE,YAF3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAKE,oBAAC,SAAD;AACE,MAAA,OAAO,EAAE,KAAKG,KAAL,CAAWD,OADtB;AAEE,MAAA,YAAY,EAAE,KAAKJ,KAAL,CAAWE,YAF3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CADF;AAYD;;AArCyB;;AAwC5B,eAAeH,GAAf","sourcesContent":["import React, {Component} from 'react';\nimport ReadString from \"./ReadString\";\nimport SetString from \"./SetString\";\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  state = { loading: true, drizzleState: null };\n\n  componentDidMount() {\n    const { drizzle } = this.props;\n\n    // subscribe to changes in the store\n    this.unsubscribe = drizzle.store.subscribe(() => {\n\n      // every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState();\n\n      // check to see if it's ready, if so, update local component state\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({ loading: false, drizzleState });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  render() {\n    if (this.state.loading) return \"Loading Drizzle...\";\n    return (\n      <div className=\"App\">\n        <ReadString\n          drizzle={this.props.drizzle}\n          drizzleState={this.state.drizzleState}\n        />\n        <SetString\n          drizzle={this.props.drizzle}\n          drizzleState={this.state.drizzleState}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}