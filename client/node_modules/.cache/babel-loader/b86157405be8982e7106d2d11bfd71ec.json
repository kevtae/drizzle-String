{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/kevin/dype-code/practice/drizzle-string/client/src/ReadString.js\";\nimport React from \"react\";\nimport MyStringStore from \"./contracts/MyStringStore.json\";\n\nclass ReadString extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dataKey: null\n    };\n  }\n\n  componentDidMount() {\n    const drizzle = this.props.drizzle;\n    const contract = drizzle.contracts.MyStringStore; // let drizzle know we want to watch the `myString` method\n\n    const dataKey = contract.methods[\"myString\"].cacheCall(); // save the `dataKey` to local component state for later reference\n\n    this.setState({\n      dataKey\n    });\n  }\n\n  render() {\n    // get the contract state from drizzleState\n    const MyStringStore = this.props.drizzleState.contracts.MyStringStore; // using the saved `dataKey`, get the variable we're interested in\n\n    const myString = MyStringStore.myString[this.state.dataKey]; // if it exists, then we display its value\n\n    return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"My stored string: \", myString && myString.value);\n  }\n\n}\n\nexport default ReadString;","map":{"version":3,"sources":["/mnt/c/Users/kevin/dype-code/practice/drizzle-string/client/src/ReadString.js"],"names":["React","MyStringStore","ReadString","Component","state","dataKey","componentDidMount","drizzle","props","contract","contracts","methods","cacheCall","setState","render","drizzleState","myString","value"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;;AAEA,MAAMC,UAAN,SAAyBF,KAAK,CAACG,SAA/B,CAAyC;AAAA;AAAA;AAAA,SACvCC,KADuC,GAC/B;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAD+B;AAAA;;AAGvCC,EAAAA,iBAAiB,GAAG;AAAA,UACVC,OADU,GACE,KAAKC,KADP,CACVD,OADU;AAElB,UAAME,QAAQ,GAAGF,OAAO,CAACG,SAAR,CAAkBT,aAAnC,CAFkB,CAIlB;;AACA,UAAMI,OAAO,GAAGI,QAAQ,CAACE,OAAT,CAAiB,UAAjB,EAA6BC,SAA7B,EAAhB,CALkB,CAOlB;;AACA,SAAKC,QAAL,CAAc;AAAER,MAAAA;AAAF,KAAd;AACD;;AAEDS,EAAAA,MAAM,GAAG;AACP;AADO,UAECb,aAFD,GAEmB,KAAKO,KAAL,CAAWO,YAAX,CAAwBL,SAF3C,CAECT,aAFD,EAIP;;AACA,UAAMe,QAAQ,GAAGf,aAAa,CAACe,QAAd,CAAuB,KAAKZ,KAAL,CAAWC,OAAlC,CAAjB,CALO,CAOP;;AACA,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAsBW,QAAQ,IAAIA,QAAQ,CAACC,KAA3C,CAAP;AACD;;AAvBsC;;AA0BzC,eAAef,UAAf","sourcesContent":["import React from \"react\";\r\nimport MyStringStore from \"./contracts/MyStringStore.json\";\r\n\r\nclass ReadString extends React.Component {\r\n  state = { dataKey: null };\r\n\r\n  componentDidMount() {\r\n    const { drizzle } = this.props;\r\n    const contract = drizzle.contracts.MyStringStore;\r\n\r\n    // let drizzle know we want to watch the `myString` method\r\n    const dataKey = contract.methods[\"myString\"].cacheCall();\r\n\r\n    // save the `dataKey` to local component state for later reference\r\n    this.setState({ dataKey });\r\n  }\r\n\r\n  render() {\r\n    // get the contract state from drizzleState\r\n    const { MyStringStore } = this.props.drizzleState.contracts;\r\n\r\n    // using the saved `dataKey`, get the variable we're interested in\r\n    const myString = MyStringStore.myString[this.state.dataKey];\r\n\r\n    // if it exists, then we display its value\r\n    return <p>My stored string: {myString && myString.value}</p>;\r\n  }\r\n}\r\n\r\nexport default ReadString;"]},"metadata":{},"sourceType":"module"}